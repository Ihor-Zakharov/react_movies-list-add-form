{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","formDefaultValue","NewMovie","onAdd","count","setCount","formValue","setFormValue","addButtonDiasbled","setAddButtonDisabled","handleSubmit","useCallback","preventDefault","newMovie","setAddButtonState","prevState","isAnyRequiredFieldEmpty","Object","entries","some","key","onSubmit","method","newTitle","newDescription","newImgUrl","newImdbUrl","newImdbId","disabled","App","setMovies","useEffect","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.639694a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Movie } from '../../types/Movie';\r\nimport './MovieCard.scss';\r\n\r\ntype Props = {\r\n  movie: Movie,\r\n};\r\n\r\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\r\n  <div className=\"card\" data-cy=\"movie-card\">\r\n    <div className=\"card-image\">\r\n      <figure className=\"image is-4by3\">\r\n        <img\r\n          src={movie.imgUrl}\r\n          alt=\"Film logo\"\r\n        />\r\n      </figure>\r\n    </div>\r\n    <div className=\"card-content\">\r\n      <div className=\"media\">\r\n        <div className=\"media-left\">\r\n          <figure className=\"image is-48x48\">\r\n            <img\r\n              src=\"images/imdb-logo.jpeg\"\r\n              alt=\"imdb\"\r\n            />\r\n          </figure>\r\n        </div>\r\n        <div className=\"media-content\">\r\n          <p className=\"title is-8\">{movie.title}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        {movie.description}\r\n        <br />\r\n        <a href={movie.imdbUrl}>IMDB</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './MoviesList.scss';\r\nimport { MovieCard } from '../MovieCard';\r\nimport { Movie } from '../../types/Movie';\r\n\r\ninterface Props {\r\n  movies: Movie[];\r\n}\r\n\r\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\r\n  <div className=\"movies\">\r\n    {movies.map(movie => (\r\n      <MovieCard\r\n        key={movie.imdbId}\r\n        movie={movie}\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n          required={required}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useCallback, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface FromValue {\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n  [key: string]: string;\n}\n\nconst formDefaultValue: FromValue = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\ninterface Props {\n  onAdd: (movie: Movie) => void;\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [formValue, setFormValue] = useState<FromValue>(formDefaultValue);\n  const [addButtonDiasbled, setAddButtonDisabled] = useState(true);\n\n  const {\n    title, description, imgUrl, imdbUrl, imdbId,\n  } = formValue;\n\n  const handleSubmit = useCallback((event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    setFormValue(formDefaultValue);\n\n    onAdd(newMovie);\n    setAddButtonDisabled(true);\n    setCount(count + 1);\n  }, [formValue]);\n\n  const setAddButtonState = useCallback(() => {\n    setFormValue((prevState) => {\n      const isAnyRequiredFieldEmpty = Object.entries(prevState).some(\n        ([key, value]) => {\n          return value === formDefaultValue[key] && key !== 'description';\n        },\n      );\n\n      setAddButtonDisabled(isAnyRequiredFieldEmpty);\n\n      return prevState;\n    });\n  }, []);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => handleSubmit(event)}\n      method=\"GET\"\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newTitle) => {\n          setFormValue((prevState) => ({ ...prevState, title: newTitle }));\n\n          setAddButtonState();\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newDescription) => {\n          setFormValue((prevState) => ({\n            ...prevState,\n            description: newDescription,\n          }));\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(newImgUrl) => {\n          setFormValue((prevState) => ({ ...prevState, imgUrl: newImgUrl }));\n          setAddButtonState();\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(newImdbUrl) => {\n          setFormValue((prevState) => ({ ...prevState, imdbUrl: newImdbUrl }));\n\n          setAddButtonState();\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newImdbId) => {\n          setFormValue((prevState) => ({ ...prevState, imdbId: newImdbId }));\n          setAddButtonState();\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={addButtonDiasbled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useCallback, useEffect, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  useEffect(() => {\n    setMovies(moviesFromServer);\n  }, []);\n\n  const onAdd = useCallback((movie: Movie) => {\n    setMovies((prevState) => [...prevState, movie]);\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}